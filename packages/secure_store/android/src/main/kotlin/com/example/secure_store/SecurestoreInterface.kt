// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.secure_store

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidPromptInfos (
  val title: String,
  val subtitle: String? = null,
  val description: String? = null,
  val cancelLabel: String,
  val confirmationRequired: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AndroidPromptInfos {
      val title = list[0] as String
      val subtitle = list[1] as String?
      val description = list[2] as String?
      val cancelLabel = list[3] as String
      val confirmationRequired = list[4] as Boolean
      return AndroidPromptInfos(title, subtitle, description, cancelLabel, confirmationRequired)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
      subtitle,
      description,
      cancelLabel,
      confirmationRequired,
    )
  }
}

/**
 * Android-specific options for biometric authentication.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidOptions (
  /** Details of the prompt to show to the user. */
  val promptInfo: AndroidPromptInfos? = null,
  /**
   * The duration in seconds for which the authentication is valid. If the
   * user sets it to -1 (default), user must authenticate each time they want
   * to get or set a secret.
   */
  val authenticationValidityDurationSeconds: Long,
  /**
   * Whether to use the StrongBox hardware-backed keystore.
   * This feature seems to cause [crashes](https://github.com/authpass/biometric_storage/issues/76),
   * enable with caution.
   */
  val enableStrongBox: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AndroidOptions {
      val promptInfo: AndroidPromptInfos? = (list[0] as List<Any?>?)?.let {
        AndroidPromptInfos.fromList(it)
      }
      val authenticationValidityDurationSeconds = list[1].let { if (it is Int) it.toLong() else it as Long }
      val enableStrongBox = list[2] as Boolean
      return AndroidOptions(promptInfo, authenticationValidityDurationSeconds, enableStrongBox)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      promptInfo?.toList(),
      authenticationValidityDurationSeconds,
      enableStrongBox,
    )
  }
}

/**
 * Platform-specific options for biometric authentication.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class BiometricOptions (
  /** Android-specific options. */
  val androidOptions: AndroidOptions? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BiometricOptions {
      val androidOptions: AndroidOptions? = (list[0] as List<Any?>?)?.let {
        AndroidOptions.fromList(it)
      }
      return BiometricOptions(androidOptions)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      androidOptions?.toList(),
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object SecureStoreInterfaceCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidOptions.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidPromptInfos.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BiometricOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AndroidOptions -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is AndroidPromptInfos -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is BiometricOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SecureStoreInterface {
  fun storeSecret(key: String, privateKey: ByteArray, biometricOptions: BiometricOptions?, callback: (Result<Unit>) -> Unit)
  fun removeSecret(key: String, callback: (Result<Unit>) -> Unit)
  fun getSecret(key: String, biometricOptions: BiometricOptions?, callback: (Result<ByteArray?>) -> Unit)
  fun biometryAvailable(): Boolean

  companion object {
    /** The codec used by SecureStoreInterface. */
    val codec: MessageCodec<Any?> by lazy {
      SecureStoreInterfaceCodec
    }
    /** Sets up an instance of `SecureStoreInterface` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SecureStoreInterface?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.SecureStoreInterface.storeSecret", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val privateKeyArg = args[1] as ByteArray
            val biometricOptionsArg = args[2] as? BiometricOptions
            api.storeSecret(keyArg, privateKeyArg, biometricOptionsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.SecureStoreInterface.removeSecret", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            api.removeSecret(keyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.SecureStoreInterface.getSecret", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val biometricOptionsArg = args[1] as? BiometricOptions
            api.getSecret(keyArg, biometricOptionsArg) { result: Result<ByteArray?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.SecureStoreInterface.biometryAvailable", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.biometryAvailable())
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
